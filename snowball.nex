/strings/
                  {
                    logDebugTokens("strings");
                    return tSTRINGS
                  }
/integers/
                  {
                    logDebugTokens("integers");
                    return tINTEGERS
                  }
/booleans/
                  {
                    logDebugTokens("booleans");
                    return tBOOLEANS
                  }
/routines/
                  {
                    logDebugTokens("routines");
                    return tROUTINES
                  }
/externals/
                  {
                    logDebugTokens("externals");
                    return tEXTERNALS
                  }
/groupings/
                  {
                    logDebugTokens("groupings");
                    return tGROUPINGS
                  }
/define/
                  {
                    logDebugTokens("define");
                    return tDEFINE
                  }
/as/
                  {
                    logDebugTokens("as");
                    return tAS
                  }
/\(/
                  {
                    logDebugTokens("(");
                    return tLPAREN
                  }
/\)/
                  {
                    logDebugTokens(")");
                    return tRPAREN
                  }
/\+/
                  {
                    logDebugTokens("+");
                    return tPLUS
                  }
/\-/
                  {
                    logDebugTokens("-");
                    return tMINUS
                  }
/\*/
                  {
                    logDebugTokens("*");
                    return tMULT
                  }
/\//
                  {
                    logDebugTokens("/");
                    return tDIV
                  }
/maxint/
                  {
                    logDebugTokens("maxint");
                    return tMAXINT
                  }
/minint/
                  {
                    logDebugTokens("minint");
                    return tMININT
                  }
/cursor/
                  {
                    logDebugTokens("cursor");
                    return tCURSOR
                  }
/limit/
                  {
                    logDebugTokens("limit");
                    return tLIMIT
                  }
/size/
                  {
                    logDebugTokens("size");
                    return tSIZE
                  }
/sizeof/
                  {
                    logDebugTokens("sizeof");
                    return tSIZEOF
                  }
/len/
                  {
                    logDebugTokens("len");
                    return tLEN
                  }
/lenof/
                  {
                    logDebugTokens("lenof");
                    return tLENOF
                  }
/\=/
                  {
                    logDebugTokens("=");
                    return tASSIGN
                  }
/\+\=/
                  {
                    logDebugTokens("+=");
                    return tPLUSASSIGN
                  }
/\-\=/
                  {
                    logDebugTokens("-=");
                    return tMINUSASSIGN
                  }
/\*\=/
                  {
                    logDebugTokens("*=");
                    return tMULTASSIGN
                  }
/\/\=/
                  {
                    logDebugTokens("/=");
                    return tDIVASSIGN
                  }
/\$/
                  {
                    logDebugTokens("$");
                    return tDOLLAR
                  }
/\=\=/
                  {
                    logDebugTokens("==");
                    return tEQ
                  }
/\!\=/
                  {
                    logDebugTokens("!=");
                    return tNEQ
                  }
/\>/
                  {
                    logDebugTokens(">");
                    return tGT
                  }
/\</
                  {
                    logDebugTokens("<");
                    return tLT
                  }
/\>\=/
                  {
                    logDebugTokens(">=");
                    return tGTEQ
                  }
/\<\=/
                  {
                    logDebugTokens("<=");
                    return tLTEQ
                  }
/or/
                  {
                    logDebugTokens("or");
                    return tOR
                  }
/and/
                  {
                    logDebugTokens("and");
                    return tAND
                  }
/not/
                  {
                    logDebugTokens("not");
                    return tNOT
                  }
/test/
                  {
                    logDebugTokens("test");
                    return tTEST
                  }
/try/
                  {
                    logDebugTokens("try");
                    return tTRY
                  }
/do/
                  {
                    logDebugTokens("do");
                    return tDO
                  }
/fail/
                  {
                    logDebugTokens("fail");
                    return tFAIL
                  }
/goto/
                  {
                    logDebugTokens("goto");
                    return tGOTO
                  }
/gopast/
                  {
                    logDebugTokens("gopast");
                    return tGOPAST
                  }
/repeat/
                  {
                    logDebugTokens("repeat");
                    return tREPEAT
                  }
/loop/
                  {
                    logDebugTokens("loop");
                    return tLOOP
                  }
/atleast/
                  {
                    logDebugTokens("atleast");
                    return tATLEAST
                  }
/insert/
                  {
                    logDebugTokens("insert");
                    return tINSERT
                  }
/\<\+/
                  {
                    logDebugTokens("insert");
                    return tINSERT
                  }
/attach/
                  {
                    logDebugTokens("attach");
                    return tATTACH
                  }
/\<\-/
                  {
                    logDebugTokens("<-");
                    return tREPLACE
                  }
/delete/
                  {
                    logDebugTokens("delete");
                    return tDELETE
                  }
/hop/
                  {
                    logDebugTokens("hop");
                    return tHOP
                  }
/next/
                  {
                    logDebugTokens("next");
                    return tNEXT
                  }
/=>/
                  {
                    logDebugTokens("=>");
                    return tASSIGNR
                  }
/\[/
                  {
                    logDebugTokens("[");
                    return tLBRACKET
                  }
/\]/
                  {
                    logDebugTokens("]");
                    return tRBRACKET
                  }
/\-\>/
                  {
                    logDebugTokens("->");
                    return tMOVER
                  }
/setmark/
                  {
                    logDebugTokens("setmark");
                    return tSETMARK
                  }
/tomark/
                  {
                    logDebugTokens("tomark");
                    return tTOMARK
                  }
/atmark/
                  {
                    logDebugTokens("atmark");
                    return tATMARK
                  }
/tolimit/
                  {
                    logDebugTokens("tolimit");
                    return tTOLIMIT
                  }
/atlimit/
                  {
                    logDebugTokens("atlimit");
                    return tATLIMIT
                  }
/setlimit/
                  {
                    logDebugTokens("setlimit");
                    return tSETLIMIT
                  }
/for/
                  {
                    logDebugTokens("for");
                    return tFOR
                  }
/backwards/
                  {
                    logDebugTokens("backwards");
                    return tBACKWARDS
                  }
/reverse/
                  {
                    logDebugTokens("reverse");
                    return tREVERSE
                  }
/substring/
                  {
                    logDebugTokens("substring");
                    return tSUBSTRING
                  }
/among/
                  {
                    logDebugTokens("among");
                    return tAMONG
                  }
/set/
                  {
                    logDebugTokens("set");
                    return tSET
                  }
/unset/
                  {
                    logDebugTokens("unset");
                    return tUNSET
                  }
/non/
                  {
                    logDebugTokens("non");
                    return tNON
                  }
/true/
                  {
                    logDebugTokens("true");
                    return tTRUE
                  }
/false/
                  {
                    logDebugTokens("false");
                    return tFALSE
                  }
/backwardmode/
                  {
                    logDebugTokens("backwardmode");
                    return tBACKWARDMODE
                  }
/stringescapes.*[A-Za-z0-9!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~][A-Za-z0-9!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/
                  {
                    lval.s = yylex.Text()[len(yylex.Text())-2:]
                    logDebugTokens("stringescapes");
                    return tSTRINGESCAPES
                  }
/\?/
                  {
                    logDebugTokens("?");
                    return tQUESTION
                  }
/'.*'/
                  {
                    lval.s = yylex.Text()[1:len(yylex.Text())-1]
                    logDebugTokens("literal - %s", lval.s);
                    return tLITERAL
                  }
/[0-9]+/
                  {
                    lval.n, _ = strconv.Atoi(yylex.Text())
                    logDebugTokens("number - %d", lval.n);
                    return tNUMBER
                  }
/[a-zA-Z][a-zA-Z0-9_]*/
                  {
                    lval.s = yylex.Text()
                    logDebugTokens("name - %s", lval.s);
                    return tNAME
                  }
/./ { logDebugTokens("other") }
//
package snowcone

import (
  "fmt"
  "strconv"
)

func logDebugTokens(format string, v ...interface{}) {
    if DebugLexer {
        Logger.Printf(fmt.Sprintf("LEXER %s", format), v...)
    }
}
